#ifndef CAR_READER_H
#define CAR_READER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct Test_Car_table *Test_Car_table_t;
typedef struct Test_Car_table *Test_Car_mutable_table_t;
typedef const flatbuffers_uoffset_t *Test_Car_vec_t;
typedef flatbuffers_uoffset_t *Test_Car_mutable_vec_t;
#ifndef Test_Car_identifier
#define Test_Car_identifier flatbuffers_identifier
#endif
#define Test_Car_type_hash ((flatbuffers_thash_t)0x71a16b45)
#define Test_Car_type_identifier "\x45\x6b\xa1\x71"



struct Test_Car_table { uint8_t unused__; };

static inline size_t Test_Car_vec_len(Test_Car_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Test_Car_table_t Test_Car_vec_at(Test_Car_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Test_Car_table_t, vec, i, 0)
__flatbuffers_table_as_root(Test_Car)

__flatbuffers_define_string_field(0, Test_Car, name, 0)
__flatbuffers_define_string_field(1, Test_Car, model, 0)
__flatbuffers_define_scalar_field(2, Test_Car, year, flatbuffers_int32, int32_t, INT32_C(0))


#include "flatcc/flatcc_epilogue.h"
#endif /* CAR_READER_H */
